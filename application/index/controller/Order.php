<?php
/**
 * | ---------------------------------------------------------------------------------------------------
 * | ProjectName: ticket
 * | ---------------------------------------------------------------------------------------------------
 * | Author：johnxu <fsyzxz@163.com>
 * | ---------------------------------------------------------------------------------------------------
 * | Home: https://www.xfjpeter.cn
 * | ---------------------------------------------------------------------------------------------------
 * | Data: 201905272019-05-27
 * | ---------------------------------------------------------------------------------------------------
 * | Desc:
 * | ---------------------------------------------------------------------------------------------------
 */

namespace app\index\controller;

use johnxu\payment\Exception;
use johnxu\payment\Payment;
use johnxu\tool\Config;
use johnxu\tool\Str;
use think\facade\Env;
use think\facade\Log;

/**
 * 订单支付及其管理
 * Class Order
 * @package app\index\controller
 */
class Order extends Api
{
    const ORDER_STATUS_STAY    = 0; // 待支付
    const ORDER_STATUS_SUCCESS = 1; // 已完成
    const ORDER_STATUS_CANCEL  = 2; // 取消订单
    const ORDER_STATUS_RETURN  = 3; // 已退款

    const ORDER_ACTIVE_STAY    = 0; // 待激活
    const ORDER_ACTIVE_SUCCESS = 1; // 已兑换

    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub

        Config::getInstance()->batch(config('payment.'));
    }

    // 获取订单列表
    public function index(string $uid = '')
    {
        $user = model('api/user')->get(['uid' => $uid]);
        if (!$user) {
            return json([
                'err_code' => 1,
                'message'  => '用户不存在',
            ]);
        }
        $inStatus = '0,1,3';
        $orders   = model('api/order')->field('id,openid', true)->order('create_time desc')->whereIn('status',
            $inStatus)->where(['openid' => $user->openid])->select();

        return json([
            'err_code' => 0,
            'message'  => 'success',
            'data'     => $this->aesEncode(
                $this->jsonEncode($orders ? $orders->toArray() : [])
            ),
        ]);
    }

    // 获取某个订单的详情
    public function get(string $order_no = '')
    {
        $order = model('api/order')->get(['order_no' => $order_no]);
        if (!$order) {
            return json([
                'err_code' => 1,
                'message'  => '订单不存在',
            ]);
        }

        return json([
            'err_code' => 0,
            'message'  => 'success',
            'data'     => $this->aesEncode(
                $this->jsonEncode($order->hidden(['id', 'openid'])->toArray())
            ),
        ]);
    }

    // 下单
    public function place(string $no)
    {
        // 判断活动是否存在或开启状态
        $activity = model('api/activity')->get(['no' => $no]);
        if (!$activity || $activity->status != 1) {
            return json([
                'err_code' => 1,
                'message'  => '下单异常',
            ]);
        }
        $data = $this->request->post();
        // 判断用户信息
        if (!isset($data['uid'])) {
            return json([
                'err_code' => 2,
                'message'  => '请授权登录后才能进行购买操作',
            ]);
        }
        $user = model('api/user')->get(['uid' => $data['uid']]);
        if (!$user) {
            return json([
                'err_code' => 1,
                'message'  => '该用户不存在',
            ]);
        }
        // 查询该场次的表单项
        $form = $this->jsonDecode(model('api/form')->where(['id' => $activity['form_id']])->value('content'));
        foreach ($form as $key => $item) {
            $form[$key]['value'] = $data['form'][$item['field']];
            // 一次判断每一项是否为空
            if ($item['required'] === true) {
                if (!isset($data['form'][$item['field']]) || empty($data['form'][$item['field']])) {
                    return json([
                        'err_code' => 1,
                        'message'  => $item['name'].'不能为空',
                    ]);
                }
            }
        }
        // 查询hall信息
        $hall        = model("api/hall")->get(['id' => $activity['hall_id']]);
        $activityMap = $activity['map'];
        // 订单检测
        if (isset($data['order_no']) && !empty($data['order_no'])) {
            $order = model('api/order')->get(['order_no' => $data['order_no'], 'openid' => $user['openid']]);
            if ($order) {
                foreach ($order['details']['hall']['map'] as $item) {
                    // 更改座位号为没有买
                    $activityMap[$item[0]][$item[1]]->type = $activityMap[$item[0]][$item[1]]->no;
                }
                // 把这个订单更新为已取消
                $order->finished_time = time();
                $order->status        = self::ORDER_STATUS_CANCEL;
                $order->save();
            }
            unset($order);
        }
        // TODO：判断是否提交了订单号，该订单号中的座位号重置
        $sites = [];
        foreach ($data['map'] as $key => $map) {
            if (!isset($map[0]) || !isset($map[1]) || !isset($activityMap[$map[0]][$map[1]])) {
                return json([
                    'err_code' => 1,
                    'message'  => '座位选择错误',
                ]);
            }
            // 判断所选的座位是否已经卖出
            $site = $activityMap[$map[0]][$map[1]];
            if ($site->type == '#' || $site->type == '@') {
                return json([
                    'err_code' => 3,
                    'message'  => '选座失败，可能已经被选了',
                    'data'     => $this->aesEncode($this->jsonEncode([
                        'map' => $activity['map'],
                    ])),
                ]);
            } else {
                $activityMap[$map[0]][$map[1]]->type = '@';
                array_push($sites, ($key + 1).'排'.$activityMap[$map[0]][$map[1]]->no.'座');
            }
        }
        $activity->map = $activityMap;
        $activity->save();
        $totalPrice = count($data['map']) * $activity['price'];
        $orderData  = [
            'order_no'    => 'ticket_'.Str::getInstance()->generateTradeNo(),
            'openid'      => $user['openid'],
            'create_time' => time(),
            'update_time' => time(),
            'total_price' => number_format($totalPrice, 2),
            'details'     => [
                'activity' => [
                    'no'         => $activity['no'],
                    'name'       => $activity['name'],
                    'price'      => $activity['price'],
                    'start_time' => $activity['start_time'],
                    'end_time'   => $activity['end_time'],
                ],
                'hall'     => [
                    'name'  => $hall['name'],
                    'map'   => $data['map'],
                    'sites' => $sites,
                ],
                'form'     => $form,
            ],
            'status'      => self::ORDER_STATUS_STAY,
            'active'      => self::ORDER_ACTIVE_STAY,
            'code'        => Str::getInstance()->getMachineCode(4, 4, ''),
        ];

        $order = model('api/order')::create($orderData);

        $result        = $order->toArray();
        $result['uid'] = $data['uid'];
        unset($result['openid'], $result['id']);

        return $order
            ? json(['err_code' => 0, 'message' => 'success', 'data' => $this->aesEncode($this->jsonEncode($result))])
            : json(['err_code' => 1, 'message' => '下单失败，请重试']);
    }

    // 微信小程序支付回调
    public function notify()
    {
        // file_put_contents(Env::get('root_path').'/public/wxpay.notify', file_get_contents('php://input'));
        // Log::record(file_get_contents('php://input'));
        try {
            $result = Payment::getInstance()->verify('wxpay')->notify();
            if ($result) {
                $order = model('api/order')->get(['order_no' => $result->out_trade_no]);
                if (!$order) {
                    // TODO: 订单支付失败
                    Log::record('订单支付失败，订单号：'.$result->out_trade_no);
                } elseif ($order->total_price * 100 != $result->total_fee) {
                    Log::record('订单支付金额不符，订单号：'.$result->out_trade_no);
                } else {
                    // 更改订单状态
                    $order->status = self::ORDER_STATUS_SUCCESS;
                    $order->save();
                }
            }
        } catch (Exception $e) {
            Log::record($e->getMessage(), 'error');
            // 本次支付回调出错
        }

        echo 'SUCCESS';
        exit();
    }

    // 微信同步回调
    public function return()
    {

    }

    // 微信小程序支付
    public function payment()
    {
        $data = $this->request->post();
        if (!isset($data['order_no']) || !isset($data['uid'])) {
            return json([
                'err_code' => 1,
                'message'  => '缺少必传参数',
            ]);
        }
        $user  = model('api/user')->get(['uid' => $data['uid']]);
        $order = model('api/order')->get(['order_no' => $data['order_no']]);
        if (!$order) {
            return json([
                'err_code' => 1,
                'message'  => '订单信息异常',
            ]);
        }
        if (!$user) {
            return json([
                'err_code' => 1,
                'message'  => '用户信息错误',
            ]);
        }

        // 判断订单是否支付
        if ($order->status != 0) {
            return json([
                'err_code' => 1,
                'message'  => '本订单已经完成，不可再操作',
            ]);
        }
        $payment = Payment::getInstance();
        try {
            $result = $payment->pay('wxpay')->mini(array(
                'body'         => $order['details']['activity']['name'], // 商品描述
                'out_trade_no' => $order['order_no'], // 商户订单号
                'total_fee'    => $order['total_price'] * 100, // 价格：分
                'openid'       => $order['openid'],
            ));
            if (!$result) {
                return json([
                    'err_code' => 1,
                    'message'  => '订单支付失败',
                ]);
            }

            return json([
                'err_code' => 0,
                'message'  => 'success',
                'data'     => $this->aesEncode($result),
            ]);
        } catch (Exception $e) {
            return json([
                'err_code' => -1,
                'message'  => $e->getMessage(),
            ]);
        }
    }

    // 取消订单
    public function cancelOrder()
    {
        $data = $this->request->post();
        if (!isset($data['uid']) || !isset($data['order_no'])) {
            return json([
                'err_code' => 1,
                'message'  => '缺少必传参数',
            ]);
        }

        // 查询用户信息
        $user = model('api/user')->get(['uid' => $data['uid']]);
        if (!$user) {
            return json([
                'err_code' => 1,
                'message'  => '用户信息异常',
            ]);
        }
        // 查询订单信息
        $order = model('api/order')->get(['order_no' => $data['order_no'], 'openid' => $user['openid']]);
        if (!$order || $order->status !== self::ORDER_STATUS_STAY) {
            return json([
                'err_code' => 0,
                'message'  => '订单异常',
            ]);
        }

        $order->status = self::ORDER_STATUS_CANCEL;
        if ($order->save()) {
            // 把这个人选的座位退还回去
            $activity    = model('api/activity')->get(['no' => $order['details']['activity']['no']]);
            $activityMap = $activity->map;
            foreach ($order['details']['hall']['map'] as $map) {
                $activityMap[$map[0]][$map[1]]->type = $activityMap[$map[0]][$map[1]]->no;
            }
            $activity->map = $activityMap;
            $activity->save();
        }

        return json([
            'err_code' => 0,
            'message'  => '取消订单成功',
        ]);
    }
}